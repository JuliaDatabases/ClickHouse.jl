var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClickHouseServerException\nClickHouseSock","category":"page"},{"location":"api/#ClickHouse.ClickHouseServerException","page":"API","title":"ClickHouse.ClickHouseServerException","text":"ClickHouse server-side exception.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClickHouse.ClickHouseSock","page":"API","title":"ClickHouse.ClickHouseSock","text":"ClickHouse client socket. Created using connect.\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"connect\nexecute\ninsert\nping\nselect\nselect_channel\nselect_df\nselect_callback","category":"page"},{"location":"api/#ClickHouse.connect","page":"API","title":"ClickHouse.connect","text":"Establish a connection to a given ClickHouse instance.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.execute","page":"API","title":"ClickHouse.execute","text":"Execute a DDL query.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.insert","page":"API","title":"ClickHouse.insert","text":"Insert blocks into a table, reading from an iterable. The iterable is expected to yield values of type Dict{Symbol, Any}.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.ping","page":"API","title":"ClickHouse.ping","text":"Send a ping request and wait for the response.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.select","page":"API","title":"ClickHouse.select","text":"Execute a query, flattening blocks into a single dict of column arrays.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.select_channel","page":"API","title":"ClickHouse.select_channel","text":"Execute a query, streaming the resulting blocks through a channel.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.select_df","page":"API","title":"ClickHouse.select_df","text":"Execute a query, flattening blocks into a dataframe.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClickHouse.select_callback","page":"API","title":"ClickHouse.select_callback","text":"Execute a query, invoking a callback for each block.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"DocTestSetup = quote\n    using ClickHouse\nend","category":"page"},{"location":"usage/#Executing-DDL","page":"Usage","title":"Executing DDL","text":"","category":"section"},{"location":"usage/#Creating-a-table","page":"Usage","title":"Creating a table","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"execute(connect(), \"\"\"\n    CREATE TABLE IF NOT EXISTS MyTable\n        (u UInt64, f Float32, s String)\n    ENGINE = Memory\n\"\"\")\n\n# output\n","category":"page"},{"location":"usage/#Inserting-data","page":"Usage","title":"Inserting data","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"insert(connect(), \"MyTable\", [Dict(\n    :u => UInt64[42, 1337, 123],\n    :f => Float32[0., ℯ, π],\n    :s => String[\"aa\", \"bb\", \"cc\"],\n)])\n\n# output\n","category":"page"},{"location":"usage/#Selecting-data","page":"Usage","title":"Selecting data","text":"","category":"section"},{"location":"usage/#...-into-a-dict-of-(column,-data)-pairs","page":"Usage","title":"... into a dict of (column, data) pairs","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"select(connect(), \"SELECT * FROM MyTable LIMIT 3\")\n\n# output\n\nDict{Symbol,Any} with 3 entries:\n  :f => Float32[0.0, 2.71828, 3.14159]\n  :s => [\"aa\", \"bb\", \"cc\"]\n  :u => UInt64[0x000000000000002a, 0x0000000000000539, 0x000000000000007b]","category":"page"},{"location":"usage/#...-into-a-DataFrame","page":"Usage","title":"... into a DataFrame","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"select_df(connect(), \"SELECT * FROM MyTable LIMIT 3\")\n\n# output\n\n3×3 DataFrame\n│ Row │ f       │ s      │ u                  │\n│     │ Float32 │ String │ UInt64             │\n├─────┼─────────┼────────┼────────────────────┤\n│ 1   │ 0.0     │ aa     │ 0x000000000000002a │\n│ 2   │ 2.71828 │ bb     │ 0x0000000000000539 │\n│ 3   │ 3.14159 │ cc     │ 0x000000000000007b │","category":"page"},{"location":"usage/#...-streaming-through-a-channel","page":"Usage","title":"... streaming through a channel","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"ch = select_channel(connect(), \"SELECT * FROM MyTable LIMIT 1\")\nfor block in ch\n    @show block\nend\n\n# output\n\nblock = Dict{Symbol,Any}(:f => Float32[0.0],:s => [\"aa\"],:u => UInt64[0x000000000000002a])","category":"page"},{"location":"usage/#...-streaming-each-block-into-a-callback","page":"Usage","title":"... streaming each block into a callback","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"This is the fastest way to stream blocks and is used under the hood to implement all other select_xyz implementations.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"select_callback(connect(), \"SELECT * FROM MyTable LIMIT 1\") do block\n    @show block\nend\n\n# output\n\nblock = Dict{Symbol,Any}(:f => Float32[0.0],:s => [\"aa\"],:u => UInt64[0x000000000000002a])","category":"page"},{"location":"#ClickHouse.jl","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"","category":"section"},{"location":"#Installation","page":"ClickHouse.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"In order to enter pkg> mode, enter a REPL and press ], then:","category":"page"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"pkg> add ClickHouse","category":"page"},{"location":"#Usage-examples","page":"ClickHouse.jl","title":"Usage examples","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"Usage examples can be found on the usage page.","category":"page"},{"location":"#Supported-data-types","page":"ClickHouse.jl","title":"Supported data types","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"String, FixedString(N)\nFloat32, Float64\nInt8, Int16, Int32, Int64\nUInt8, UInt16, UInt32, UInt64\nDate, DateTime, DateTime64\nEnum\nUUID\nTuple\nLowCardinality(T)\nNullable(T)\nArray(T)\nNothing\nSimpleAggregateFunction\nIPv4, IPv6\nDecimals","category":"page"},{"location":"#Limitations","page":"ClickHouse.jl","title":"Limitations","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"Transfer compression is currently not implemented\nTimezone conversion of DateTime / DateTime64 for columns that have a timezone assigned in ClickHouse doesn't happen automatically. All DateTime objects are naive, meaning they aren't timezone aware. For reasoning, see this post and this post.","category":"page"},{"location":"#Index","page":"ClickHouse.jl","title":"Index","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"","category":"page"},{"location":"#Contents","page":"ClickHouse.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"ClickHouse.jl","title":"ClickHouse.jl","text":"","category":"page"}]
}
